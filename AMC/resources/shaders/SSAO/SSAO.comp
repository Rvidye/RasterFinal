#version 460 core

#extension GL_ARB_bindless_texture : require
#extension GL_EXT_shader_image_load_formatted : require

#include<..\..\..\resources\shaders\include\CommonTypes.glsl>
#include<..\..\..\resources\shaders\include\Transformations.glsl>
#include<..\..\..\resources\shaders\include\StaticUniformBuffers.glsl>
#include<..\..\..\resources\shaders\include\Random.glsl>
#include<..\..\..\resources\shaders\include\Sampling.glsl>

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 2) restrict writeonly uniform image2D ImgResult;

layout(location = 0) uniform int SampleCount;
layout(location = 1) uniform float Radius;
layout(location = 2) uniform float Strength;

float SSAO(vec3 fragPos, vec3 normal);

void main()
{
    ivec2 imgCoord = ivec2(gl_GlobalInvocationID.xy);
    float depth = texelFetch(gBufferDataUBO.Depth, imgCoord, 0).r;
    if (depth == 1.0)
    {
        imageStore(ImgResult, imgCoord, vec4(0.0));
        return;
    }

    vec2 uv = (imgCoord + 0.5) / imageSize(ImgResult);
    vec3 normal = texelFetch(gBufferDataUBO.Normal, imgCoord, 0).rgb;
    vec3 fragPos = PerspectiveTransformUvDepth(vec3(uv, depth), perFrameDataUBO.InvProjView);

    float occlusion = SSAO(fragPos, normal);

    imageStore(ImgResult, imgCoord, vec4(occlusion));
}

float SSAO(vec3 fragPos, vec3 normal)
{
    fragPos += normal * 0.04;

    float occlusion = 0.0;

    uint noiseIndex = 0u;
    for (int i = 0; i < SampleCount; i++)
    {
        float rnd0 = InterleavedGradientNoise(vec2(gl_GlobalInvocationID.xy), noiseIndex++);
        float rnd1 = InterleavedGradientNoise(vec2(gl_GlobalInvocationID.xy), noiseIndex++);
        float rnd2 = InterleavedGradientNoise(vec2(gl_GlobalInvocationID.xy), noiseIndex++);

        vec3 samplePos = fragPos + CosineSampleHemisphere(normal, rnd0, rnd1) * Radius * rnd2;
        
        vec3 projectedSample = PerspectiveTransform(samplePos, perFrameDataUBO.ProjView);
        projectedSample.xy = projectedSample.xy * 0.5 + 0.5;

        float depth = texture(gBufferDataUBO.Depth, projectedSample.xy).r;
        if (projectedSample.z > depth)
        {
            vec3 sampleToFrag = fragPos - samplePos;
            float weight = dot(sampleToFrag, sampleToFrag) / (Radius * Radius);
            occlusion += weight;
        }
    }
    occlusion /= float(SampleCount);
    occlusion *= Strength;
    return occlusion;
}
