#version 460 core

#include<..\..\..\resources\shaders\include\CommonTypes.glsl>
#include<..\..\..\resources\shaders\include\StaticUniformBuffers.glsl>
#include<..\..\..\resources\shaders\include\Transformations.glsl>
#include<..\..\..\resources\shaders\include\Ray.glsl>
#include<..\..\..\resources\shaders\include\Box.glsl>
#include<..\..\..\resources\shaders\include\Frustum.glsl>
#include<..\..\..\resources\shaders\include\IntersectionRoutines.glsl>
#include<..\..\..\resources\shaders\include\TraceCone.glsl>

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(binding = 0) restrict writeonly uniform image2D ImgResult;
layout(binding = 0) uniform sampler3D SamplerVoxels;
layout(binding = 1) uniform samplerCube SkyBoxAlbedo;
layout(location = 0) uniform float StepMultiplier;
layout(location = 1) uniform float ConeAngle;
layout(location = 2) uniform vec3 GridMin;
layout(location = 3) uniform vec3 GridMax;

void main()
{
    ivec2 imgCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 ndc = (imgCoord + 0.5) / imageSize(ImgResult) * 2.0 - 1.0;

    Ray worldRay;
    worldRay.Origin = perFrameDataUBO.ViewPos;
    worldRay.Direction = GetWorldSpaceDirection(perFrameDataUBO.InvProjection, perFrameDataUBO.InvView, ndc);

    float t1, t2;
    if (!(RayBoxIntersect(worldRay, Box(GridMin, GridMax), t1, t2) && t2 > 0.0))
    {
        vec4 skyColor = texture(SkyBoxAlbedo, worldRay.Direction);
        imageStore(ImgResult, imgCoord, skyColor);
        return;
    }

    bool isInsideGrid = t1 < 0.0 && t2 > 0.0;
    if (isInsideGrid)
    {
        worldRay.Origin = perFrameDataUBO.ViewPos;
    }
    else
    {
        worldRay.Origin = worldRay.Origin + worldRay.Direction * t1;
    }

    vec4 color = TraceCone(SamplerVoxels, worldRay, ConeAngle, StepMultiplier, GridMin, GridMax);
    color += (1.0 - color.a) * texture(SkyBoxAlbedo, worldRay.Direction);

    imageStore(ImgResult, imgCoord, color);
}
