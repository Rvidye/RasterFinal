#version 460 core

#define PI 3.14159265

#extension GL_ARB_bindless_texture : require
#extension GL_EXT_shader_image_load_formatted : require

#include<..\..\..\resources\shaders\include\CommonTypes.glsl>
#include<..\..\..\resources\shaders\include\Transformations.glsl>
#include<..\..\..\resources\shaders\include\StaticUniformBuffers.glsl>
#include<..\..\..\resources\shaders\include\Random.glsl>
#include<..\..\..\resources\shaders\include\Compression.glsl>
#include<..\..\..\resources\shaders\include\Surface.glsl>
#include<..\..\..\resources\shaders\include\Pbr.glsl>

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(binding = 0) restrict writeonly uniform image2D ImgResult;
layout(binding = 1) restrict writeonly uniform image2D ImgResultDepth;

layout(location = 0) uniform vec3 Absorbance;
layout(location = 1) uniform int SampleCount;
layout(location = 2) uniform float Scattering;
layout(location = 3) uniform float MaxDist;
layout(location = 4) uniform float Strength;

vec3 UniformScatter(Light light, Shadows shadow, vec3 origin, vec3 viewDir, vec3 deltaStep, int sampleCount);
bool Shadow(Shadows shadow, vec3 lightToSample);
float GetLightSpaceDepth(Shadows shadow, vec3 lightSpaceSamplePos);
float ComputeScattering(float cosTheta, float scaterring);

// Source: http://www.alexandre-pestana.com/volumetric-lights/
const float DitherPattern[][4] = 
{
    { 0.0, 0.5, 0.125, 0.625 },
    { 0.75, 0.22, 0.875, 0.375 },
    { 0.1875, 0.6875, 0.0625, 0.5625 },
    { 0.9375, 0.4375, 0.8125, 0.3125 }
};

void main()
{
    ivec2 imgCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (imgCoord + 0.5) / imageSize(ImgResult);

    float depth = texture(gBufferDataUBO.Depth, uv).r;
    vec3 ndc = vec3(uv * 2.0 - 1.0, depth);
    vec3 unjitteredFragPos = PerspectiveTransform(vec3(ndc.xy - vec2(-0.0,0.0), ndc.z), perFrameDataUBO.InvProjView);
    vec3 viewToFrag = unjitteredFragPos - perFrameDataUBO.ViewPos;

    float viewToFragLen = length(viewToFrag);
    vec3 viewDir = viewToFrag / viewToFragLen;
    
    if (viewToFragLen > MaxDist)
    {
        viewToFrag = viewDir * MaxDist;
    }

    vec3 deltaStep = viewToFrag / SampleCount;
    float randomJitter = DitherPattern[imgCoord.x % DitherPattern[0].length()][imgCoord.y % DitherPattern.length()];
    vec3 origin = perFrameDataUBO.ViewPos + deltaStep * randomJitter;

    vec3 scattered = vec3(0.0);
    for (int i = 0; i < count; i++)
    {
        Shadows pointShadow = shadows[i];
        Light light = u_Lights[pointShadow.LightIndex];

        scattered += UniformScatter(light, pointShadow, origin, viewDir, deltaStep, SampleCount);
    }

    imageStore(ImgResult, imgCoord, vec4(scattered * Strength, 1.0));
    imageStore(ImgResultDepth, imgCoord, vec4(depth));
}

vec3 UniformScatter(Light light, Shadows pointShadow, vec3 origin, vec3 viewDir, vec3 deltaStep, int sampleCount)
{
    vec3 scattered = vec3(0.0);
    vec3 samplePoint = origin;
    for (int i = 0; i < sampleCount; i++)
    {
        vec3 lightToSample = samplePoint - light.position;
        if (!Shadow(pointShadow, lightToSample))
        {
            float lengthToLight = length(lightToSample);
            float attenuation = GetAttenuationFactor(lengthToLight * lengthToLight, light.range);
            
            vec3 absorbed = exp(-Absorbance * lengthToLight);
            
            vec3 lightDir = lightToSample / lengthToLight;
            float cosTheta = dot(lightDir, -viewDir);
            
            scattered += light.color * ComputeScattering(cosTheta, Scattering) * attenuation * absorbed;
        }
        samplePoint += deltaStep;
    }
    scattered /= sampleCount;

    // Apply Beers's law, Absorbance is constant so we can have it outside the loop
    vec3 absorbed = exp(-Absorbance * length(origin - samplePoint));
    scattered *= absorbed;
    return scattered;
}

// Only binaries shadow because soft shadows are not worth it in this case
bool Shadow(Shadows pointShadow, vec3 lightToSample)
{
    // Calculate the linear distance from the light to the sample point
    float distance = length(lightToSample);
    
    // Normalize the distance by the far plane to match the shadow map's stored depth
    float normalizedDepth = distance / pointShadow.FarPlane;
    
    // Normalize the direction vector for cubemap sampling
    vec3 direction = normalize(lightToSample);
    
    // Sample the shadow map using the normalized direction
    float closestDepth = texture(pointShadow.ShadowMapTexture, direction).r;
    
    // Optional: Apply a small bias to prevent shadow acne
    float bias = 0.001;
    
    // Compare the normalized depth with the closest depth from the shadow map
    return (normalizedDepth - bias) > closestDepth;
}

float GetLightSpaceDepth(Shadows pointShadow, vec3 lightSpaceSamplePos)
{
    float dist = max(abs(lightSpaceSamplePos.x), max(abs(lightSpaceSamplePos.y), abs(lightSpaceSamplePos.z)));
    float depth = GetLogarithmicDepth(pointShadow.NearPlane, pointShadow.FarPlane, dist);

    return depth;
}

float ComputeScattering(float cosTheta, float scaterring)
{
    // Mie scaterring approximated with Henyey-Greenstein phase function
    // Source: http://www.alexandre-pestana.com/volumetric-lights/
    return (1.0 - scaterring * scaterring) / (4.0 * PI * pow(1.0 + scaterring * scaterring - 2.0 * scaterring * cosTheta, 1.5));
}
